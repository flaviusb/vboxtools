#!/bin/bash
# change these settings to a more suitable form

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

warn () {
    echo $@ >&2
}

die () {
    warn $@
    exit 1
}

sourceconfigs () {
    for name in $@; do
        config=$DIR/../share/config/$name
        if [ ! -f "${config}" ]; then
            warn "configfile '${config}' not found"
            return 1
        fi
        source $config
    done
}

checkenv () {
    for name in $@; do
        if [ -z "${!name}" ]; then
            warn "'${name}' is undefined"
            return 1
        fi
    done
}

checkenvfile () {
    checkenv $@ || return 1
    for name in $@; do
        if [ ! -f "${!name}" ]; then
            warn "'${!name}' is missing in working directory; aborting"
            return 1
        fi
    done
}

putscancode () {
    echo $@ | $DIR/../bin/scancode.py
}

runscancode () {
    target=${2:-${VBOX_NAME}}
    default=${VBOX_SCANCODE_LIMIT-10}
    limit=${3-$default}
    putscancode $1 | xargs -n $limit \
        VBoxManage controlvm "${target}" keyboardputscancode
}

set_vm_mac_ip () {
    name=$1
    net=$2
    VBOX_MAC=$(
        VBoxManage showvminfo "${name}" | grep "${net}" | \
        sed -r 's/.*MAC: ([0-9A-F]*).*/\1/' | sed -r 's/(.{2})/:\1/g' | \
        cut -b 2-
    )
    echo "mac is $VBOX_MAC"
    VBOX_IP=$(
        arp | grep -i ${VBOX_MAC} | cut -d' ' -f1
    )
    if [ -z $VBOX_IP ]; then
        warn "failed to derive IP"
        return 1
    fi
    echo "ip is $VBOX_IP"
    export VBOX_MAC=$VBOX_MAC
    export VBOX_IP=$VBOX_IP
}

find_vm () {
    name=$1
    # provide the double quotes to ensure full string is matched against
    # the double-quoted output.
    VBoxManage list vms |grep "\"${name}\"" > /dev/null
    if [ ! $? -eq 0 ]; then
        warn "vm '${name}' not found"
        return 1
    fi
}

check_vm_running () {
    name=$1
    VBoxManage list runningvms |grep "\"${name}\"" > /dev/null
}

wait_vm_shutdown () {
    # wait for a vm to shutdown, default 10 seconds
    name=$1
    timeout=${2:-10}  # default 10 seconds timeout

    find_vm "${name}" || return 2
    for ((i=0; i <= $timeout; i++)) do
        # return success code 0 if no longer running
        check_vm_running "${name}" || return 0
        if [ $i -ne $timeout ]; then
            sleep 1
        fi
    done
    # still running, so this has failed.
    return 1
}

forcepoweroff_vm () {
    name=$1
    timeout=$2
    # try to trigger an acpi shutdown for a more graceful shutdown first
    VBoxManage controlvm "${name}" acpipowerbutton
    wait_vm_shutdown "${name}" $timeout && return 0
    warn "'${name}' failed to shutdown; forcing poweroff"
    VBoxManage controlvm "${name}" poweroff
    return 1
}

set_vm_environ () {
    sourceconfigs base $@
    if [ ! $? -eq 0 ]; then
        return 1
    fi

    if [ -f ./config ]; then
        # override using version in local directory
        source ./config
    fi

    checkenv VBOX_NAME
    if [ ! $? -eq 0 ]; then
        return 1
    fi

    export VBOX_HOME="${VBOX_ROOT}/${VBOX_NAME}"
    export VBOX_IMG="${VBOX_HOME}/${VBOX_NAME}.vhd"
    export VBOX_PRIVKEY="${VBOX_HOME}/id_rsa"
    export VBOX_PUBKEY="${VBOX_HOME}/id_rsa.pub"
    export VBOX_NET=vboxnet0
}

create_vm () {
    set_vm_environ $@ &&
    checkenvfile BOOT_ISO || return 1

    # verify that the vm and image does not already exists yet
    VBoxManage showvminfo "${VBOX_NAME}" 2>/dev/null >/dev/null
    if [ $? -eq 0 ]; then
        warn "'${VBOX_NAME}' is already registered as a vm"
        warn "(unregister with: VBoxManage unregistervm '${VBOX_NAME}')"
        return 1
    fi

    if [ -f "${VBOX_IMG}" ]; then
        warn "vm image at '${VBOX_IMG}' already exists"
        return 1
    fi

    # automatically create vboxnet0 if not exists
    VBoxManage list hostonlyifs |grep vboxnet0 2> /dev/null >/dev/null
    if [ $? -ne 0 ]; then
        VBoxManage hostonlyif create
    fi

    # find the existence of the target vboxnet, which may not be present
    # (this is the reason for sticking with default $VBOX_NET)
    VBoxManage list hostonlyifs |grep "${VBOX_NET}" 2> /dev/null >/dev/null
    if [ $? -ne 0 ]; then
        warn "hostonlyif ${VBOX_NET} does not exist"
        return 1
    fi

    export VBOX_HOST_IP=$(
        VBoxManage list hostonlyifs |grep "${VBOX_NET}" -A4 | \
        grep IPAddress| awk '{print $2}'
    )

    # create the VM; end each command with &&

    mkdir -p "${VBOX_ROOT}" &&
    VBoxManage createvm --name "${VBOX_NAME}" --basefolder "${VBOX_ROOT}" \
        --register &&
    VBoxManage modifyvm "${VBOX_NAME}" --ostype Gentoo_64 --memory=4096 \
        --cpus $VBOX_N_CPU --ioapic on \
        --nic1 hostonly --nic2 nat --cableconnected1 on --cableconnected2 on \
        --nictype1 82540EM --nictype2 82540EM \
        --hostonlyadapter1 "${VBOX_NET}" &&

    VBoxManage storagectl "${VBOX_NAME}" --name IDE --add ide \
        --controller PIIX4 &&
    VBoxManage storagectl "${VBOX_NAME}" --name SATA --add sata \
        --controller IntelAhci --portcount 4 &&

    VBoxManage createmedium disk --size $VBOX_DISK_SIZE --format VHD \
        --filename "${VBOX_IMG}" &&

    VBoxManage storageattach "${VBOX_NAME}" --storagectl IDE --port 0 \
        --device 0 --type dvddrive --medium "${BOOT_ISO}" &&
    VBoxManage storageattach "${VBOX_NAME}" --storagectl SATA --port 0 \
        --device 0 --type hdd --medium "${VBOX_IMG}" &&

    # generate ssh keys
    ssh-keygen -N '' -C "${VBOX_NAME}" -f "${VBOX_PRIVKEY}" &&

    # finalize it with true to stop the last &&
    true
}

connect_vm () {
    set_vm_environ $@
    set_vm_mac_ip
    ssh -oStrictHostKeyChecking=no -oBatchMode=Yes -i "${VBOX_PRIVKEY}" \
        root@${VBOX_IP}
}
