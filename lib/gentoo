#!/bin/bash
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source $DIR/../lib/utils

prepare_gentoo_boot_iso() {
    timeout=${GENTOO_POSTBOOT_TIMEOUT:-15}
    # hit enter a couple times
    # first to boot from the iso.
    sleep 5
    runscancode ""
    # then to select default keyboard layout.
    sleep 10
    runscancode ""

    echo "sleeping for ${timeout} seconds before working"
    sleep $timeout

    # get the guest to talk to the host to populate the arp table
    runscancode "ping -c1 $VBOX_HOST_IP"

    set_vm_mac_ip "${VBOX_NAME}" "${VBOX_NET}"
    if [ $? -ne 0 ]; then
        echo "cannot continue with automated installation"
        return 1
    fi

    runscancode "/etc/init.d/sshd start"
    runscancode "mkdir ~/.ssh"
    runscancode "echo $(cat "${VBOX_PUBKEY}") > ~/.ssh/authorized_keys"
}

download_gentoo_release() {
    local retvar="${1}"
    local release="${2}"
    local release_path="${GENTOO_RELEASE_PATH:-"releases/amd64/autobuilds"}"
    local release_root="${GENTOO_MIRROR}/${release_path}"
    local latest_release_path="${release_root}/latest-${release}.txt"

    local blob_path=$(
        wget -q "${latest_release_path}" -O - | \
        grep "${release}" | \
        cut -f1 -d' '
    )

    if [ -z "$blob_path" ]; then
        warn "cannot find/download release '${2}'"
        return 1
    fi

    local url="${release_root}/${blob_path}"
    local target="$(basename "${url}")"
    wget -c -nv "${url}" -O "${target}"
    # also get the signed checksum file.
    wget -c -nv "${url}.DIGESTS.asc" -O "${target}.DIGESTS.asc"
    eval "${1}='${target}'"
}
